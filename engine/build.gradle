plugins {
    id('java')
    id('org.gradlex.extra-java-module-info')
}

sourceCompatibility = JavaVersion.VERSION_17

sourceSets {
  main {
    java.srcDirs = ["src/main"]
    java.includes = ["**/*.java"]
    resources.srcDirs = ["src/main"]
    resources.excludes = ["**/*.java"]

    java.destinationDirectory.set(file("$buildDir/classes"))
    output.resourcesDir = "$buildDir/classes"
  }
  test {
    java.srcDirs = ["src/test"]
    java.includes = ["**/*.java"]
    resources.srcDirs = ["src/test"]
    resources.excludes = ["**/*.java"]

    java.destinationDirectory.set(file("$buildDir/tests"))
    output.resourcesDir = "$buildDir/tests"
  }
}

repositories {
  mavenCentral()
  // Java Spatial Index for RTree
  maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}
  maven {url "https://mvnrepository.com/artifact/net.sf.trove4j/trove4j"}
}

extraJavaModuleInfo {
    // hibernate-search has some unused unimported dependencies, so it's okay if we can't find them
    failOnMissingModuleInfo.set(false)
    
    automaticModule("org.apache.commons:commons-lang3", "org.apache.commons")
    automaticModule("commons-cli:commons-cli", "commons.cli")
    automaticModule("commons-io:commons-io", "commons.io")
    automaticModule("com.google.flatbuffers:flatbuffers-java", "com.google.flatbuffers")
    automaticModule("org.java-websocket:Java-WebSocket", "org.java.websocket")
    
    automaticModule("org.hibernate:hibernate-search", "org.hibernate")
    
    automaticModule("net.sf.jsi:jsi", "net.sf.jsi")
    automaticModule("net.sf.trove4j:trove4j", "net.sf.trove4j")
}

dependencies {
  implementation(
    [group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'],
    [group: 'commons-cli', name: 'commons-cli', version: '1.5.0'],
    [group: 'commons-io', name: 'commons-io', version: '2.11.0'],

    [group: 'org.ow2.asm', name: 'asm', version: '9.4'],
    [group: 'org.ow2.asm', name: 'asm-tree', version: '9.4'],

    // Flatbuffers
    [group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '1.11.0'],
    
    // Websockets
    [group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.0'],

    // We only use WeakIdentityHashMap which doesn't depend on anything
    [group: 'org.hibernate', name: 'hibernate-search', version: '3.3.0.Final'],

    // Java Spatial Index, RTree indexing
    [group: 'net.sf.jsi', name: 'jsi', version: '1.1.0-SNAPSHOT'],
    [group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'],
  )

  testImplementation(
    [group: 'junit', name: 'junit', version: '4.13.2'],
    [group: 'org.mockito', name: 'mockito-core', version: '3.12.4']
  )
}

jar {
  duplicatesStrategy 'exclude'
  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}

javadoc {
  // Gradle does not yet fully support javadocs with modularized java
  // This applies the workaround from https://github.com/gradle/gradle/issues/19726
  def sourceSetDirectories = sourceSets.main.java.sourceDirectories.join(":")
  def coreOptions = options as CoreJavadocOptions
  coreOptions.addStringOption("-source-path", sourceSetDirectories)
  
  includes = ["**/common/**"]
  options.windowTitle = "Battlecode 2023"
  options.doclet = "jdk.javadoc.doclet.StandardDoclet"
  options.taglets = ["battlecode.doc.CostlyMethodTaglet", "battlecode.doc.RobotTypeTaglet"]
  options.tagletPath = ( sourceSets.main.output.classesDirs as List )+ sourceSets.main.compileClasspath
}
